import telebot
import time
import threading
from telebot import types
import os
import sys
from config import TOKEN, DB_PATH,EXCEL_PATH

# Importar funciones para manejar estados
from utils.state_manager import get_state, set_state, clear_state, user_states, user_data

# Importar funciones para manejar el Excel
from utils.excel_manager import cargar_excel, importar_datos_desde_excel
from db.queries import get_db_connection
# Reemplaza todos los handlers universales por este √öNICO handler al final
# Inicializar el bot de Telegram
bot = telebot.TeleBot(TOKEN) 

def escape_markdown(text):
    """Escapa caracteres especiales de Markdown"""
    if not text:
        return ""
    
    chars = ['_', '*', '`', '[', ']', '(', ')', '#', '+', '-', '.', '!']
    for char in chars:
        text = text.replace(char, '\\' + char)
    
    return text




def setup_commands():
    """Configura los comandos que aparecen en el men√∫ del bot"""
    try:
        bot.set_my_commands([
            telebot.types.BotCommand("/start", "Inicia el bot y el registro"),
            telebot.types.BotCommand("/help", "Muestra la ayuda del bot"),
            telebot.types.BotCommand("/tutoria", "Ver profesores disponibles para tutor√≠a"),
            telebot.types.BotCommand("/crear_grupo_tutoria", "Crea un grupo de tutor√≠a"),
            telebot.types.BotCommand("/configurar_horario", "Configura tu horario de tutor√≠as"),
            telebot.types.BotCommand("/ver_misdatos", "Ver tus datos registrados")
        ])
        print("‚úÖ Comandos del bot configurados correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Error al configurar los comandos del bot: {e}")
        return False

# Importar funciones b√°sicas de consulta a la BD
from db.queries import get_user_by_telegram_id

@bot.message_handler(commands=['help'])
def handle_help(message):
    """Muestra la ayuda del bot"""
    chat_id = message.chat.id
    user = get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        bot.send_message(
            chat_id,
            "‚ùå No est√°s registrado. Usa /start para registrarte."
        )
        return
    
    help_text = (
        "ü§ñ *Comandos disponibles:*\n\n"
        "/start - Inicia el bot y el proceso de registro\n"
        "/help - Muestra este mensaje de ayuda\n"
        "/tutoria - Ver profesores disponibles para tutor√≠a\n"
        "/ver_misdatos - Ver tus datos registrados\n"
    )
    
    if user['Tipo'] == 'profesor':
        help_text += (
            "/configurar_horario - Configura tu horario de tutor√≠as\n"
            "/crear_grupo_tutoria - Crea un grupo de tutor√≠a\n"
        )
    
    # Escapar los guiones bajos para evitar problemas de formato
    help_text = help_text.replace("_", "\\_")
    
    try:
        bot.send_message(chat_id, help_text, parse_mode="Markdown")
    except Exception as e:
        print(f"Error al enviar mensaje de ayuda: {e}")
        # Si falla, env√≠a sin formato
        bot.send_message(chat_id, help_text.replace('*', ''), parse_mode=None)

@bot.message_handler(commands=['ver_misdatos'])
def handle_ver_misdatos(message):
    chat_id = message.chat.id
    print(f"\n\n### INICIO VER_MISDATOS - Usuario: {message.from_user.id} ###")
    
    user = get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        print("‚ö†Ô∏è Usuario no encontrado en BD")
        bot.send_message(chat_id, "‚ùå No est√°s registrado. Usa /start para registrarte.")
        return
    
    print(f"‚úÖ Usuario encontrado: {user['Nombre']} ({user['Tipo']})")
    
    # Convertir el objeto sqlite3.Row a diccionario
    user_dict = dict(user)
    
    # Obtener matr√≠culas del usuario
    from db.queries import get_matriculas_usuario
    matriculas = get_matriculas_usuario(user['Id_usuario'])
    
    user_info = (
        f"üë§ *Datos de usuario:*\n\n"
        f"*Nombre:* {user['Nombre']}\n"
        f"*Correo:* {user['Email_UGR'] or 'No registrado'}\n"
        f"*Tipo:* {user['Tipo'].capitalize()}\n"
    )
    
    # A√±adir la carrera desde la tabla Usuarios
    if 'Carrera' in user_dict and user_dict['Carrera']:
        user_info += f"*Carrera:* {user_dict['Carrera']}\n\n"
    else:
        user_info += "*Carrera:* No registrada\n\n"
    
    # A√±adir informaci√≥n de matr√≠culas
    if matriculas and len(matriculas) > 0:
        user_info += "*Asignaturas matriculadas:*\n"
        
        # Agrupar asignaturas por carrera
        for m in matriculas:
            # Convertir cada matr√≠cula a diccionario si es necesario
            m_dict = dict(m) if hasattr(m, 'keys') else m
            asignatura = m_dict.get('Asignatura', 'Desconocida')
            user_info += f"- {asignatura}\n"
    else:
        user_info += "No tienes asignaturas matriculadas.\n"
    
    # A√±adir horario si es profesor
    if user['Tipo'] == 'profesor':
        if 'Horario' in user_dict and user_dict['Horario']:
            user_info += f"\n*Horario de tutor√≠as:*\n{user_dict['Horario']}\n\n"
        
        # NUEVA SECCI√ìN: Mostrar salas creadas por el profesor
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Consultar todas las salas creadas por este profesor
        cursor.execute("""
            SELECT g.Nombre_sala, g.Proposito_sala, g.Tipo_sala, g.Fecha_creacion, 
                   g.id_sala, g.Chat_id, a.Nombre as NombreAsignatura
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            WHERE g.Id_usuario = ?
            ORDER BY g.Fecha_creacion DESC
        """, (user['Id_usuario'],))
        
        salas = cursor.fetchall()
        conn.close()
        
        if salas and len(salas) > 0:
            user_info += "\n*üîµ Salas de tutor√≠a creadas:*\n"
            
            # Diccionario para traducir los prop√≥sitos a texto m√°s amigable
            propositos = {
                'individual': 'Tutor√≠as individuales',
                'grupal': 'Tutor√≠as grupales',
                'avisos': 'Canal de avisos'
            }
            
            for sala in salas:
                # Obtener prop√≥sito en formato legible
                proposito = propositos.get(sala['Proposito_sala'], sala['Proposito_sala'] or 'General')
                
                # Obtener asignatura o indicar que es general
                asignatura = sala['NombreAsignatura'] or 'General'
                
                # Formato de fecha m√°s amigable
                fecha = sala['Fecha_creacion'].split(' ')[0] if sala['Fecha_creacion'] else 'Desconocida'
                
                user_info += f"‚Ä¢ *{sala['Nombre_sala']}*\n"
                user_info += f"  üìã Prop√≥sito: {proposito}\n"
                user_info += f"  üìö Asignatura: {asignatura}\n"
                user_info += f"  üìÖ Creada: {fecha}\n\n"
        else:
            user_info += "\n*üîµ No has creado salas de tutor√≠a todav√≠a.*\n"
            user_info += "Usa /crear_grupo_tutoria para crear una nueva sala.\n"
    
    # Intentar enviar el mensaje con formato Markdown
    try:
        bot.send_message(chat_id, user_info, parse_mode="Markdown")
        
        # Si es profesor y tiene salas, mostrar botones para editar
        if user['Tipo'] == 'profesor' and salas and len(salas) > 0:
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            # A√±adir SOLO botones para editar cada sala (quitar botones de eliminar)
            for sala in salas:
                sala_id = sala['id_sala']
                
                markup.add(types.InlineKeyboardButton(
                    f"‚úèÔ∏è Sala: {sala['Nombre_sala']}",
                    callback_data=f"edit_sala_{sala_id}"
                ))
            
            bot.send_message(
                chat_id,
                "Selecciona una sala para gestionar:",
                reply_markup=markup
            )
    except Exception as e:
        # Si falla por problemas de formato, enviar sin formato
        print(f"Error al enviar datos de usuario: {e}")
        bot.send_message(chat_id, user_info.replace('*', ''), parse_mode=None)

# Importar y configurar los handlers desde los m√≥dulos
from handlers.registro import register_handlers as register_registro_handlers
from handlers.tutorias import register_handlers as register_tutorias_handlers
from handlers.horarios import register_handlers as register_horarios_handlers
from utils.excel_manager import verificar_excel_disponible
from grupo_handlers.grupos import GestionGrupos

# Verificar si es la primera ejecuci√≥n
MARKER_FILE = os.path.join(os.path.dirname(DB_PATH), ".initialized")
primera_ejecucion = not os.path.exists(MARKER_FILE)

# Verificar que el Excel existe pero no cargar datos
print("üìä Cargando datos acad√©micos...")
if verificar_excel_disponible():
    print("‚úÖ Excel encontrado")
    # Primera vez - importar todo
    if primera_ejecucion:  # Usa alguna forma de detectar primer inicio
        importar_datos_desde_excel(solo_nuevos=False)
        # Crear archivo marcador para futuras ejecuciones
        with open(MARKER_FILE, 'w') as f:
            f.write("Initialized")
    else:
        # Ejecuciones posteriores - solo nuevos datos
        importar_datos_desde_excel(solo_nuevos=True)
else:
    print("‚ö†Ô∏è Excel no encontrado")

# Registrar todos los handlers
register_registro_handlers(bot)
register_tutorias_handlers(bot)
register_horarios_handlers(bot)


# Handlers para cambio de prop√≥sito de salas de tutor√≠a
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_sala_"))
def handle_edit_sala(call):
    """Muestra opciones para editar una sala"""
    chat_id = call.message.chat.id
    print(f"\n\n### INICIO EDIT_SALA - Callback: {call.data} ###")
    
    try:
        sala_id = int(call.data.split("_")[2])
        print(f"üîç Sala ID a editar: {sala_id}")
        
        # Verificar que el usuario es el propietario de la sala
        user = get_user_by_telegram_id(call.from_user.id)
        print(f"üë§ Usuario: {user['Nombre'] if user else 'No encontrado'}")
        
        if not user or user['Tipo'] != 'profesor':
            print("‚ö†Ô∏è Usuario no es profesor o no existe")
            bot.answer_callback_query(call.id, "‚ö†Ô∏è Solo los profesores propietarios pueden editar salas")
            return
        
        # Obtener datos actuales de la sala
        conn = get_db_connection()
        cursor = conn.cursor()
        print(f"üîç Consultando detalles de sala ID {sala_id}")
        cursor.execute(
            """
            SELECT g.*, a.Nombre as NombreAsignatura
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            WHERE g.id_sala = ? AND g.Id_usuario = ?  
            """, 
            (sala_id, user['Id_usuario'])
        )
        sala = cursor.fetchone()
        conn.close()
        
        if not sala:
            print(f"‚ùå Sala no encontrada o no pertenece al usuario")
            bot.answer_callback_query(call.id, "‚ùå No se encontr√≥ la sala o no tienes permisos")
            return
        
        print(f"‚úÖ Sala encontrada: {sala['Nombre_sala']} (Chat ID: {sala['Chat_id']})")
        
        # Mostrar opciones simplificadas (solo eliminar)
        print("üîò Generando bot√≥n de eliminaci√≥n...")
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        # A√±adir opci√≥n para eliminar la sala
        markup.add(types.InlineKeyboardButton(
            "üóëÔ∏è Eliminar sala",
            callback_data=f"eliminarsala_{sala_id}"
        ))
        print(f"  ‚úì Bot√≥n eliminar con callback: eliminarsala_{sala_id}")
        
        # Bot√≥n para cancelar
        markup.add(types.InlineKeyboardButton(
            "‚ùå Cancelar",
            callback_data=f"cancelar_edicion_{sala_id}"
        ))
        
        # Preparar textos seguros para Markdown
        nombre_sala = escape_markdown(sala['Nombre_sala'])
        nombre_asignatura = escape_markdown(sala['NombreAsignatura'] or 'General')
        
        print(f"üì§ Enviando mensaje de edici√≥n")
        bot.edit_message_text(
            f"üîÑ *Gestionar sala*\n\n"
            f"*Sala:* {nombre_sala}\n"
            f"*Asignatura:* {nombre_asignatura}\n\n"
            f"Selecciona la acci√≥n que deseas realizar:",
            chat_id=chat_id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="Markdown"
        )
        print("‚úÖ Mensaje de opciones enviado")
    
    except Exception as e:
        print(f"‚ùå ERROR en handle_edit_sala: {e}")
        import traceback
        print(traceback.format_exc())
    
    bot.answer_callback_query(call.id)
    print("‚úÖ Respuesta de callback enviada")
    print(f"### FIN EDIT_SALA - Callback: {call.data} ###\n")

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancelar_edicion_"))
def handle_cancelar_edicion(call):
    """Cancela la edici√≥n de la sala"""
    bot.edit_message_text(
        "‚ùå Operaci√≥n cancelada. No se realizaron cambios.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cambiar_proposito_"))
def handle_cambiar_proposito(call):
    """Muestra opciones para gestionar miembros al cambiar el prop√≥sito de la sala"""
    chat_id = call.message.chat.id
    data = call.data.split("_")
    sala_id = int(data[2])
    nuevo_proposito = data[3]
    
    # Verificar usuario
    user = get_user_by_telegram_id(call.from_user.id)
    if not user or user['Tipo'] != 'profesor':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è No tienes permisos para esta acci√≥n")
        return
    
    # Obtener datos de la sala
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT g.*, a.Nombre as NombreAsignatura
        FROM Grupos_tutoria g
        LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
        WHERE g.id_sala = ? AND g.Id_usuario = ?  
        """, 
        (sala_id, user['Id_usuario'])
    )
    sala = cursor.fetchone()
    
    # Contar miembros actuales
    cursor.execute(
        "SELECT COUNT(*) as total FROM Miembros_Grupo WHERE id_sala = ? AND Estado = 'activo'",  # cambiar chat_id por id_sala
        (sala_id,)
    )
    miembros = cursor.fetchone()
    conn.close()
    
    total_miembros = miembros['total'] if miembros else 0
    
    # Si no hay miembros, cambiar directamente
    if total_miembros == 0:
        realizar_cambio_proposito(chat_id, call.message.message_id, sala_id, nuevo_proposito, user['Id_usuario'])
        bot.answer_callback_query(call.id)
        return
    
    # Textos descriptivos seg√∫n el tipo de cambio
    propositos = {
        'individual': 'Tutor√≠as individuales (requiere aprobaci√≥n)',
        'grupal': 'Tutor√≠as grupales',
        'avisos': 'Canal de avisos (acceso p√∫blico)'
    }
    
    # Escapar todos los textos din√°micos
    nombre_sala = escape_markdown(sala['Nombre_sala'])
    nombre_asignatura = escape_markdown(sala['NombreAsignatura'] or 'General')
    prop_actual = escape_markdown(propositos.get(sala['Proposito_sala'], 'General'))
    prop_nueva = escape_markdown(propositos.get(nuevo_proposito, 'General'))
    
    # Determinar qu√© tipo de cambio es
    cambio_tipo = f"{sala['Proposito_sala']}_{nuevo_proposito}"
    titulo_decision = ""
    
    if cambio_tipo == "avisos_individual":
        titulo_decision = (
            f"üîÑ Est√°s cambiando de *canal de avisos* a *tutor√≠as individuales*.\n"
            f"Esto har√° que los nuevos accesos requieran tu aprobaci√≥n."
        )
    elif cambio_tipo == "individual_avisos":
        titulo_decision = (
            f"üîÑ Est√°s cambiando de *tutor√≠as individuales* a *canal de avisos*.\n"
            f"Esto permitir√° que cualquier estudiante matriculado acceda directamente."
        )
    else:
        titulo_decision = f"üîÑ Est√°s cambiando el prop√≥sito de la sala de *{prop_actual}* a *{prop_nueva}*."
    
    # Mostrar opciones para gestionar miembros
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    markup.add(types.InlineKeyboardButton(
        f"‚úÖ Mantener a los {total_miembros} miembros actuales",
        callback_data=f"confirmar_cambio_{sala_id}_{nuevo_proposito}_mantener"
    ))
    
    markup.add(types.InlineKeyboardButton(
        "‚ùå Eliminar a todos los miembros actuales",
        callback_data=f"confirmar_cambio_{sala_id}_{nuevo_proposito}_eliminar"
    ))
    
    markup.add(types.InlineKeyboardButton(
        "üîç Ver lista de miembros antes de decidir",
        callback_data=f"ver_miembros_{sala_id}_{nuevo_proposito}"
    ))
    
    markup.add(types.InlineKeyboardButton(
        "‚Ü©Ô∏è Cancelar cambio",
        callback_data=f"cancelar_edicion_{sala_id}"
    ))
    
    # Enviar mensaje con opciones
    bot.edit_message_text(
        f"{titulo_decision}\n\n"
        f"*Sala:* {nombre_sala}\n"
        f"*Miembros actuales:* {total_miembros}\n"
        f"*Asignatura:* {nombre_asignatura}\n\n"
        f"¬øQu√© deseas hacer con los miembros actuales?",
        chat_id=chat_id,
        message_id=call.message.message_id,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmar_cambio_"))
def handle_confirmar_cambio(call):
    """Confirma el cambio de prop√≥sito con la decisi√≥n sobre los miembros"""
    chat_id = call.message.chat.id
    data = call.data.split("_")
    sala_id = int(data[2])
    nuevo_proposito = data[3]
    decision_miembros = data[4]  # "mantener" o "eliminar"
    
    # Verificar usuario
    user = get_user_by_telegram_id(call.from_user.id)
    if not user or user['Tipo'] != 'profesor':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è No tienes permisos para esta acci√≥n")
        return
    
    # Realizar el cambio de prop√≥sito
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Obtener informaci√≥n de la sala
        cursor.execute(
            """
            SELECT g.*, a.Nombre as NombreAsignatura, u.Nombre as NombreProfesor
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            LEFT JOIN Usuarios u ON g.Id_usuario = u.Id_usuario
            WHERE g.id_sala = ?
            """, 
            (sala_id,)
        )
        sala = cursor.fetchone()
        
        if not sala:
            bot.answer_callback_query(call.id, "‚ùå Error: No se encontr√≥ la sala")
            conn.close()
            return
        
        # 1. Actualizar el prop√≥sito de la sala
        cursor.execute(
            "UPDATE Grupos_tutoria SET Proposito_sala = ? WHERE id_sala = ? AND Id_usuario = ?",
            (nuevo_proposito, sala_id, user['Id_usuario'])
        )
        
        # 2. Actualizar el tipo de sala seg√∫n el prop√≥sito
        tipo_sala = 'p√∫blica' if nuevo_proposito == 'avisos' else 'privada'
        cursor.execute(
            "UPDATE Grupos_tutoria SET Tipo_sala = ? WHERE id_sala = ?",
            (tipo_sala, sala_id)
        )
        
        # 3. Generar y actualizar el nuevo nombre seg√∫n el prop√≥sito
        nuevo_nombre = None
        if nuevo_proposito == 'avisos':
            nuevo_nombre = f"Avisos: {sala['NombreAsignatura']}"
        elif nuevo_proposito == 'individual':
            nuevo_nombre = f"Tutor√≠a Privada - Prof. {sala['NombreProfesor']}"
        
        # Actualizar el nombre en la BD
        if nuevo_nombre:
            cursor.execute(
                "UPDATE Grupos_tutoria SET Nombre_sala = ? WHERE id_sala = ?",
                (nuevo_nombre, sala_id)
            )
            
            # Intentar cambiar el nombre en Telegram
            telegram_chat_id = sala['Chat_id']
            
            # Primero intentar con el bot actual (aunque probablemente fallar√°)
            try:
                bot.set_chat_title(telegram_chat_id, nuevo_nombre)
                print(f"‚úÖ Nombre del grupo actualizado a: {nuevo_nombre}")
            except Exception as e:
                print(f"‚ö†Ô∏è Bot principal no pudo cambiar el nombre: {e}")
                
                # Si falla, utilizar la funci√≥n del bot de grupos
                try:
                    # Importar la funci√≥n de cambio de nombre de grupos.py
                    from grupo_handlers.grupos import cambiar_nombre_grupo_telegram
                    
                    # Llamar a la funci√≥n para cambiar el nombre
                    if cambiar_nombre_grupo_telegram(telegram_chat_id, nuevo_nombre):
                        print(f"‚úÖ Nombre del grupo actualizado usando el bot de grupos")
                    else:
                        print(f"‚ùå No se pudo cambiar el nombre del grupo ni siquiera con el bot de grupos")
                except Exception as e:
                    print(f"‚ùå Error al intentar utilizar la funci√≥n del bot de grupos: {e}")
        
        # 4. Gestionar miembros seg√∫n la decisi√≥n
        if decision_miembros == "eliminar":
            # Eliminar todos los miembros excepto el profesor creador
            cursor.execute(
                """
                DELETE FROM Miembros_Grupo 
                WHERE id_sala = ? AND Id_usuario != (
                    SELECT Id_usuario FROM Grupos_tutoria WHERE id_sala = ?
                )
                """,
                (sala_id, sala_id)
            )
        
        conn.commit()
        
        # Obtener informaci√≥n actualizada de la sala
        cursor.execute(
            """
            SELECT g.*, a.Nombre as NombreAsignatura
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            WHERE g.id_sala = ?
            """, 
            (sala_id,)
        )
        sala = cursor.fetchone()
        
        # Contar miembros restantes
        cursor.execute(
            "SELECT COUNT(*) as total FROM Miembros_Grupo WHERE id_sala = ? AND Estado = 'activo'",
            (sala_id,)
        )
        miembros = cursor.fetchone()
        total_miembros = miembros['total'] if miembros else 0
        
        # Textos para los prop√≥sitos
        propositos = {
            'individual': 'Tutor√≠as individuales',
            'grupal': 'Tutor√≠as grupales',
            'avisos': 'Canal de avisos'
        }
        
        # Escapar textos que pueden contener caracteres Markdown
        nombre_sala = escape_markdown(sala['Nombre_sala'])
        nombre_asignatura = escape_markdown(sala['NombreAsignatura'] or 'General')
        prop_nueva = escape_markdown(propositos.get(nuevo_proposito, 'General'))
        
        # Mensaje de √©xito
        mensaje_exito = (
            f"‚úÖ *¬°Prop√≥sito actualizado correctamente!*\n\n"
            f"*Sala:* {nombre_sala}\n"
            f"*Nuevo prop√≥sito:* {prop_nueva}\n"
            f"*Asignatura:* {nombre_asignatura}\n"
            f"*Miembros actuales:* {total_miembros}\n\n"
        )
        
        # Agregar mensaje seg√∫n la decisi√≥n tomada
        if decision_miembros == "eliminar":
            mensaje_exito += (
                "üßπ Se han eliminado todos los miembros anteriores.\n"
                "La sala est√° lista para su nuevo prop√≥sito."
            )
        else:
            mensaje_exito += (
                "üë• Se han mantenido todos los miembros anteriores.\n"
                "Se ha notificado a los miembros del cambio de prop√≥sito."
            )
            # Notificar a los miembros del cambio
            notificar_cambio_sala(sala_id, nuevo_proposito)
        
        # Editar mensaje con confirmaci√≥n
        try:
            bot.edit_message_text(
                mensaje_exito,
                chat_id=chat_id,
                message_id=call.message.message_id,
                parse_mode="Markdown"
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                pass  # Ignorar este error espec√≠fico
            else:
                # Manejar otros errores
                print(f"Error al editar mensaje de confirmaci√≥n: {e}")
                bot.send_message(chat_id, mensaje_exito, parse_mode="Markdown")
        
    except Exception as e:
        print(f"Error al actualizar sala: {e}")
        bot.answer_callback_query(call.id, "‚ùå Error al actualizar la sala")
    finally:
        conn.close()
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("ver_miembros_"))
def handle_ver_miembros(call):
    """Muestra la lista de miembros de la sala antes de decidir"""
    chat_id = call.message.chat.id
    data = call.data.split("_")
    sala_id = int(data[2])
    nuevo_proposito = data[3]
    
    # Verificar usuario
    user = get_user_by_telegram_id(call.from_user.id)
    if not user or user['Tipo'] != 'profesor':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è No tienes permisos para esta acci√≥n")
        return
    
    # Obtener lista de miembros
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        """
        SELECT u.Nombre, u.Apellidos, u.Email_UGR, mg.Fecha_union, mg.Estado
        FROM Miembros_Grupo mg
        JOIN Usuarios u ON mg.Id_usuario = u.Id_usuario
        WHERE mg.id_sala = ? AND mg.Estado = 'activo'
        ORDER BY mg.Fecha_union DESC
        """,
        (sala_id,)
    )
    
    miembros = cursor.fetchall()
    
    # Obtener informaci√≥n de la sala
    cursor.execute(
        "SELECT Nombre_sala FROM Grupos_tutoria WHERE id_sala = ?",
        (sala_id,)
    )
    sala = cursor.fetchone()
    conn.close()
    
    if not miembros:
        # No hay miembros, cambiar directamente
        bot.answer_callback_query(call.id, "No hay miembros en esta sala")
        realizar_cambio_proposito(chat_id, call.message.message_id, sala_id, nuevo_proposito, user['Id_usuario'])
        return
    
    # Crear mensaje con lista de miembros
    mensaje = f"üë• *Miembros de la sala \"{sala['Nombre_sala']}\":*\n\n"
    
    for i, m in enumerate(miembros, 1):
        nombre_completo = f"{m['Nombre']} {m['Apellidos'] or ''}"
        fecha = m['Fecha_union'].split(' ')[0] if m['Fecha_union'] else 'Desconocida'
        mensaje += f"{i}. *{nombre_completo}*\n   üìß {m['Email_UGR']}\n   üìÖ Unido: {fecha}\n\n"
    
    # Botones para continuar
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    markup.add(types.InlineKeyboardButton(
        f"‚úÖ Mantener a los {len(miembros)} miembros",
        callback_data=f"confirmar_cambio_{sala_id}_{nuevo_proposito}_mantener"
    ))
    
    markup.add(types.InlineKeyboardButton(
        "‚ùå Eliminar a todos los miembros",
        callback_data=f"confirmar_cambio_{sala_id}_{nuevo_proposito}_eliminar"
    ))
    
    markup.add(types.InlineKeyboardButton(
        "‚Ü©Ô∏è Cancelar cambio",
        callback_data=f"cancelar_edicion_{sala_id}"
    ))
    
    # Enviar mensaje con lista y opciones
    bot.edit_message_text(
        mensaje,
        chat_id=chat_id,
        message_id=call.message.message_id,
        reply_markup=markup,
        parse_mode="Markdown"
    )
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancelar_edicion_"))
def handle_cancelar_edicion(call):
    """Cancela la edici√≥n de la sala"""
    bot.edit_message_text(
        "‚ùå Operaci√≥n cancelada. No se realizaron cambios.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    bot.answer_callback_query(call.id)

def notificar_cambio_sala(sala_id, nuevo_proposito):
    """Notifica a los miembros de la sala sobre el cambio de prop√≥sito"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Obtener datos de la sala
    cursor.execute(
        """
        SELECT g.*, u.Nombre as NombreProfesor, a.Nombre as NombreAsignatura
        FROM Grupos_tutoria g
        JOIN Usuarios u ON g.Id_usuario = u.Id_usuario
        LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
        WHERE g.id_sala = ?  
        """, 
        (sala_id,)
    )
    sala = cursor.fetchone()
    
    if not sala:
        conn.close()
        return
    
    # Obtener miembros de la sala
    cursor.execute(
        """
        SELECT u.*
        FROM Miembros_Grupo mg
        JOIN Usuarios u ON mg.Id_usuario = u.Id_usuario
        WHERE mg.id_sala = ? AND u.Tipo = 'estudiante' AND mg.Estado = 'activo'  
        """, 
        (sala_id,)
    )
    miembros = cursor.fetchall()
    conn.close()
    
    # Textos para los prop√≥sitos (simplificado)
    propositos = {
        'individual': 'Tutor√≠as individuales',
        'avisos': 'Canal de avisos'
    }
    
    # Textos explicativos seg√∫n el nuevo prop√≥sito
    explicaciones = {
        'individual': (
            "Ahora la sala requiere aprobaci√≥n del profesor para cada solicitud "
            "y solo est√° disponible durante su horario de tutor√≠as."
        ),
        'avisos': (
            "Ahora la sala funciona como canal informativo donde "
            "el profesor comparte anuncios importantes para todos los estudiantes."
        )
    }
    
    # Notificar a cada miembro
    for miembro in miembros:
        if miembro['TelegramID']:
            try:
                bot.send_message(
                    miembro['TelegramID'],
                    f"‚ÑπÔ∏è *Cambio en sala de tutor√≠a*\n\n"
                    f"El profesor *{sala['NombreProfesor']}* ha modificado el prop√≥sito "
                    f"de la sala *{sala['Nombre_sala']}*.\n\n"
                    f"*Nuevo prop√≥sito:* {propositos.get(nuevo_proposito, 'General')}\n"
                    f"*Asignatura:* {sala['NombreAsignatura'] or 'General'}\n\n"
                    f"{explicaciones.get(nuevo_proposito, '')}\n\n"
                    f"Tu acceso a la sala se mantiene, pero la forma de interactuar "
                    f"podr√≠a cambiar seg√∫n el nuevo prop√≥sito.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"Error al notificar a usuario {miembro['Id_usuario']}: {e}")

def realizar_cambio_proposito(chat_id, message_id, sala_id, nuevo_proposito, user_id):
    """Realiza el cambio de prop√≥sito cuando no hay miembros que gestionar"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Obtener datos actuales de la sala
        cursor.execute(
            """
            SELECT g.*, a.Nombre as NombreAsignatura
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            WHERE g.id_sala = ?
            """, 
            (sala_id,)
        )
        sala = cursor.fetchone()
        
        if not sala:
            bot.edit_message_text(
                "‚ùå Error: No se encontr√≥ la sala",
                chat_id=chat_id,
                message_id=message_id
            )
            conn.close()
            return
        
        # Actualizar prop√≥sito
        cursor.execute(
            "UPDATE Grupos_tutoria SET Proposito_sala = ? WHERE id_sala = ? AND Id_usuario = ?",
            (nuevo_proposito, sala_id, user_id)
        )
        
        # Actualizar tipo
        tipo_sala = 'p√∫blica' if nuevo_proposito == 'avisos' else 'privada'
        cursor.execute(
            "UPDATE Grupos_tutoria SET Tipo_sala = ? WHERE id_sala = ?",
            (tipo_sala, sala_id)
        )
        
        # Generar nuevo nombre seg√∫n el prop√≥sito
        nuevo_nombre = None
        if nuevo_proposito == 'avisos':
            nuevo_nombre = f"Avisos: {sala['NombreAsignatura']}"
        elif nuevo_proposito == 'individual':
            nuevo_nombre = f"Tutor√≠a Privada - Prof. {obtener_nombre_profesor(user_id)}"
        
        # Si se gener√≥ un nuevo nombre, actualizar en la base de datos
        if nuevo_nombre:
            cursor.execute(
                "UPDATE Grupos_tutoria SET Nombre_sala = ? WHERE id_sala = ?",
                (nuevo_nombre, sala_id)
            )
            
            # Intentar cambiar el nombre del grupo en Telegram
            telegram_chat_id = sala['Chat_id']
            
            # Primero intentar con el bot actual (aunque probablemente fallar√°)
            try:
                bot.set_chat_title(telegram_chat_id, nuevo_nombre)
                print(f"‚úÖ Nombre del grupo actualizado a: {nuevo_nombre}")
            except Exception as e:
                print(f"‚ö†Ô∏è Bot principal no pudo cambiar el nombre: {e}")
                
                # Si falla, utilizar la funci√≥n del bot de grupos
                try:
                    # Importar la funci√≥n de cambio de nombre de grupos.py
                    from grupo_handlers.grupos import cambiar_nombre_grupo_telegram
                    
                    # Llamar a la funci√≥n para cambiar el nombre
                    if cambiar_nombre_grupo_telegram(telegram_chat_id, nuevo_nombre):
                        print(f"‚úÖ Nombre del grupo actualizado usando el bot de grupos")
                    else:
                        print(f"‚ùå No se pudo cambiar el nombre del grupo ni siquiera con el bot de grupos")
                except Exception as e:
                    print(f"‚ùå Error al intentar utilizar la funci√≥n del bot de grupos: {e}")
        
        conn.commit()
        
        # Obtener info actualizada
        cursor.execute(
            """
            SELECT g.*, a.Nombre as NombreAsignatura
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            WHERE g.id_sala = ?
            """, 
            (sala_id,)
        )
        sala_actualizada = cursor.fetchone()
        
        # Textos para los prop√≥sitos
        propositos = {
            'individual': 'Tutor√≠as individuales',
            'grupal': 'Tutor√≠as grupales',
            'avisos': 'Canal de avisos'
        }
        
        # Enviar confirmaci√≥n
        bot.edit_message_text(
            f"‚úÖ *¬°Prop√≥sito actualizado correctamente!*\n\n"
            f"*Sala:* {sala_actualizada['Nombre_sala']}\n"
            f"*Nuevo prop√≥sito:* {propositos.get(nuevo_proposito, 'General')}\n"
            f"*Asignatura:* {sala_actualizada['NombreAsignatura'] or 'General'}\n\n"
            f"La sala est√° lista para su nuevo prop√≥sito.",
            chat_id=chat_id,
            message_id=message_id,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"Error al actualizar sala: {e}")
        bot.send_message(chat_id, "‚ùå Error al actualizar la sala")
    finally:
        conn.close()

def obtener_nombre_profesor(user_id):
    """Obtiene el nombre del profesor a partir del id de usuario"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT Nombre FROM Usuarios WHERE Id_usuario = ?", (user_id,))
    resultado = cursor.fetchone()
    conn.close()
    return resultado['Nombre'] if resultado else "Profesor"



@bot.callback_query_handler(func=lambda call: call.data.startswith("eliminarsala_"))
def handle_eliminar_sala(call):
    """Maneja la solicitud de eliminaci√≥n de una sala"""
    chat_id = call.message.chat.id
    print(f"\n\n### INICIO ELIMINAR_SALA - Callback: {call.data} ###")
    
    try:
        sala_id = int(call.data.split("_")[1])
        print(f"üîç Sala ID a eliminar: {sala_id}")
        
        # Verificar que el usuario es el propietario de la sala
        user = get_user_by_telegram_id(call.from_user.id)
        
        if not user or user['Tipo'] != 'profesor':
            print("‚ö†Ô∏è Usuario no es profesor o no existe")
            bot.answer_callback_query(call.id, "‚ö†Ô∏è Solo los profesores propietarios pueden eliminar salas")
            return
        
        # Obtener datos de la sala
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT g.*, a.Nombre as NombreAsignatura
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            WHERE g.id_sala = ? AND g.Id_usuario = ?  
            """, 
            (sala_id, user['Id_usuario'])
        )
        sala = cursor.fetchone()
        
        if not sala:
            print(f"‚ùå Sala no encontrada o no pertenece al usuario")
            bot.answer_callback_query(call.id, "‚ùå No se encontr√≥ la sala o no tienes permisos")
            conn.close()
            return
        
        print(f"‚úÖ Sala encontrada: {sala['Nombre_sala']} (Chat ID: {sala['Chat_id']})")
        
        # Contar miembros actuales
        cursor.execute(
            "SELECT COUNT(*) as total FROM Miembros_Grupo WHERE id_sala = ? AND Estado = 'activo'",
            (sala_id,)
        )
        miembros = cursor.fetchone()
        total_miembros = miembros['total'] if miembros else 0
        conn.close()
        
        # Preparar textos seguros para Markdown
        nombre_sala = escape_markdown(sala['Nombre_sala'])
        nombre_asignatura = escape_markdown(sala['NombreAsignatura'] or 'General')
        
        # Confirmar la eliminaci√≥n con botones
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        markup.add(types.InlineKeyboardButton(
            "‚úÖ S√≠, eliminar esta sala",
            callback_data=f"confirmar_eliminar_{sala_id}"
        ))
        
        markup.add(types.InlineKeyboardButton(
            "‚ùå No, cancelar",
            callback_data=f"cancelar_edicion_{sala_id}"
        ))
        
        # Enviar mensaje de confirmaci√≥n
        bot.edit_message_text(
            f"‚ö†Ô∏è *¬øEst√°s seguro de que deseas eliminar esta sala?*\n\n"
            f"*Sala:* {nombre_sala}\n"
            f"*Asignatura:* {nombre_asignatura}\n"
            f"*Miembros actuales:* {total_miembros}\n\n"
            f"Esta acci√≥n es irreversible. La sala ser√° eliminada de la base de datos "
            f"y se perder√° todo el registro de miembros.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"‚ùå ERROR en handle_eliminar_sala: {e}")
        import traceback
        print(traceback.format_exc())
    
    bot.answer_callback_query(call.id)
    print("### FIN ELIMINAR_SALA ###")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmar_eliminar_"))
def handle_confirmar_eliminar(call):
    """Confirma y ejecuta la eliminaci√≥n de la sala"""
    chat_id = call.message.chat.id
    print(f"\n\n### INICIO CONFIRMAR_ELIMINAR - Callback: {call.data} ###")
    
    try:
        sala_id = int(call.data.split("_")[2])
        print(f"üîç Sala ID a eliminar definitivamente: {sala_id}")
        
        # Verificar que el usuario es el propietario de la sala
        user = get_user_by_telegram_id(call.from_user.id)
        
        if not user or user['Tipo'] != 'profesor':
            print("‚ö†Ô∏è Usuario no es profesor o no existe")
            bot.answer_callback_query(call.id, "‚ö†Ô∏è Solo los profesores propietarios pueden eliminar salas")
            return
        
        # Obtener datos de la sala
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            """
            SELECT g.*, a.Nombre as NombreAsignatura
            FROM Grupos_tutoria g
            LEFT JOIN Asignaturas a ON g.Id_asignatura = a.Id_asignatura
            WHERE g.id_sala = ? AND g.Id_usuario = ?  
            """, 
            (sala_id, user['Id_usuario'])
        )
        sala = cursor.fetchone()
        
        if not sala:
            print(f"‚ùå Sala no encontrada o no pertenece al usuario")
            bot.answer_callback_query(call.id, "‚ùå No se encontr√≥ la sala o no tienes permisos")
            conn.close()
            return
        
        nombre_sala = sala['Nombre_sala']
        telegram_chat_id = sala['Chat_id']
        print(f"‚úÖ Ejecutando eliminaci√≥n de sala: {nombre_sala} (ID: {sala_id}, Chat ID: {telegram_chat_id})")
        
        # 1. Eliminar todos los miembros de la sala
        print("1Ô∏è‚É£ Eliminando miembros...")
        cursor.execute(
            "DELETE FROM Miembros_Grupo WHERE id_sala = ?",
            (sala_id,)
        )
        print(f"  ‚úì Miembros eliminados de la BD")
        
        # 2. Eliminar la sala de la base de datos
        print("2Ô∏è‚É£ Eliminando registro de sala...")
        cursor.execute(
            "DELETE FROM Grupos_tutoria WHERE id_sala = ? AND Id_usuario = ?",
            (sala_id, user['Id_usuario'])
        )
        print(f"  ‚úì Sala eliminada de la BD")
        
        # Confirmar cambios en la base de datos
        conn.commit()
        conn.close()
        print("‚úÖ Cambios en BD confirmados")
        
        # 3. Intentar salir del grupo de Telegram
        print("3Ô∏è‚É£ Intentando salir del grupo de Telegram...")
        try:
            bot.leave_chat(telegram_chat_id)
            print(f"  ‚úì Bot sali√≥ del grupo de Telegram: {telegram_chat_id}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è No se pudo salir del grupo de Telegram: {e}")
            
            # Intentar con el bot de grupos si est√° disponible
            try:
                from grupo_handlers.grupos import salir_de_grupo
                if salir_de_grupo(telegram_chat_id):
                    print("  ‚úì Bot de grupos sali√≥ del grupo")
                else:
                    print("  ‚ö†Ô∏è Bot de grupos no pudo salir del grupo")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Error al usar la funci√≥n del bot de grupos: {e}")
        
        # 4. Enviar mensaje de confirmaci√≥n
        print("4Ô∏è‚É£ Enviando confirmaci√≥n al usuario...")
        bot.edit_message_text(
            f"‚úÖ *Sala eliminada con √©xito*\n\n"
            f"La sala \"{escape_markdown(nombre_sala)}\" ha sido eliminada completamente.\n"
            f"Todos los miembros y registros asociados han sido eliminados.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
        print("  ‚úì Mensaje de confirmaci√≥n enviado")
        
    except Exception as e:
        print(f"‚ùå ERROR en handle_confirmar_eliminar: {e}")
        import traceback
        print(traceback.format_exc())
        bot.edit_message_text(
            "‚ùå Ha ocurrido un error al intentar eliminar la sala. Por favor, int√©ntalo de nuevo.",
            chat_id=chat_id,
            message_id=call.message.message_id
        )
    
    bot.answer_callback_query(call.id)
    print("### FIN CONFIRMAR_ELIMINAR ###")

@bot.message_handler(commands=['crear_grupo_tutoria'])
def crear_grupo(message):
    """Proporciona instrucciones para crear un grupo de tutor√≠a en Telegram"""
    chat_id = message.chat.id
    user = get_user_by_telegram_id(message.from_user.id)
    
    # Verificar que el usuario es profesor
    if not user or user['Tipo'] != 'profesor':
        bot.send_message(
            chat_id,
            "‚ùå Solo los profesores pueden crear grupos de tutor√≠a."
        )
        return
    
    # Instrucciones sin formato especial (sin asteriscos ni caracteres problem√°ticos)
    instrucciones = (
        "üéì C√≥mo crear un grupo de tutor√≠a\n\n"
        "Siga estos pasos para crear un grupo de tutor√≠a efectivo:\n\n"
        
        "1Ô∏è‚É£ Crear un grupo nuevo en Telegram\n"
        "‚Ä¢ Pulse el bot√≥n de nueva conversaci√≥n\n"
        "‚Ä¢ Seleccione 'Nuevo grupo'\n\n"
        
        "2Ô∏è‚É£ A√±adir el bot al grupo\n"
        "‚Ä¢ Pulse el nombre del grupo\n"
        "‚Ä¢ Seleccione 'Administradores'\n"
        "‚Ä¢ A√±ada a @UGRBot como administrador\n"
        "‚Ä¢ Active todos los permisos\n\n"
        
        "3Ô∏è‚É£ Configurar el grupo\n"
        "‚Ä¢ En el grupo, escriba /configurar_grupo\n"
        "‚Ä¢ Siga las instrucciones para vincular la sala\n"
        "‚Ä¢ Configure el tipo de tutor√≠a\n\n"
        
        "üìå Recomendaciones para el nombre del grupo\n"
        "‚Ä¢ 'Tutor√≠as [Asignatura] - [Su Nombre]'\n"
        "‚Ä¢ 'Avisos [Asignatura] - [A√±o Acad√©mico]'\n\n"
        
        "üîî Una vez registrada la sala podr√°\n"
        "‚Ä¢ Gestionar solicitudes de tutor√≠a\n"
        "‚Ä¢ Programar sesiones grupales\n"
        "‚Ä¢ Enviar avisos autom√°ticos\n"
        "‚Ä¢ Ver estad√≠sticas de participaci√≥n"
    )
    
    # Crear botones √∫tiles con callback data simplificados
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            "üìù Ver mis salas actuales", 
            callback_data="ver_misdatos"  # Simplificado
        ),
        types.InlineKeyboardButton(
            "‚ùì Preguntas frecuentes",
            callback_data="faq_grupo"  # Simplificado
        )
    )
    
    # Enviar mensaje SIN formato markdown para evitar errores
    try:
        bot.send_message(
            chat_id,
            instrucciones,
            reply_markup=markup
        )
    except Exception as e:
        print(f"Error al enviar instrucciones de creaci√≥n de grupo: {e}")
        bot.send_message(
            chat_id,
            "Para crear un grupo de tutor√≠a: 1) Cree un grupo, 2) A√±ada al bot como administrador, "
            "3) Use /configurar_grupo en el grupo.",
            reply_markup=markup
        )


# Handlers para los botones simplificados
@bot.callback_query_handler(func=lambda call: call.data == "ver_salas")
def handler_ver_salas(call):
    """Muestra las salas actuales del usuario"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    # Depuraci√≥n adicional
    print(f"\n\n### INICIO VER_SALAS CALLBACK ###")
    print(f"üîç Callback data: {call.data}")
    print(f"üë§ User ID: {user_id}, Chat ID: {chat_id}")
    print(f"üìù Message ID: {call.message.message_id}")
    
    # Responder al callback inmediatamente para evitar el error de "query is too old"
    try:
        bot.answer_callback_query(call.id)
        print("‚úÖ Callback respondido correctamente")
    except Exception as e:
        print(f"‚ùå Error al responder al callback: {e}")
    
    # Soluci√≥n para evitar crear un mensaje simulado
    try:
        print("üîÑ Llamando directamente a handle_ver_misdatos...")
        
        # En lugar de crear un mensaje simulado, llamamos directamente a la funci√≥n
        # y proporcionamos los datos m√≠nimos necesarios
        mensaje_directo = {
            'chat': {'id': chat_id},
            'from_user': {'id': user_id},
            'text': '/ver_misdatos'
        }
        
        # Creamos una versi√≥n simplificada del mensaje
        class SimpleMessage:
            def __init__(self, chat_id, user_id, text):
                self.chat = types.Chat(chat_id, 'private')
                self.from_user = types.User(user_id, False, 'Usuario')
                self.text = text
        
        # Crear el mensaje simplificado
        msg = SimpleMessage(chat_id, user_id, '/ver_misdatos')
        
        # Llamar directamente a la funci√≥n de manejo
        handle_ver_misdatos(msg)
        print("‚úÖ handle_ver_misdatos llamado con √©xito")
    except Exception as e:
        print(f"‚ùå Error al llamar a handle_ver_misdatos: {str(e)}")
        import traceback
        print("üìã Traza de error completa:")
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå Error al mostrar tus salas. Intenta usar /ver_misdatos directamente.")
    
    print("### FIN VER_SALAS CALLBACK ###\n\n")


@bot.callback_query_handler(func=lambda call: call.data == "faq_grupo")
def handler_faq_grupo(call):
    """Muestra preguntas frecuentes sobre creaci√≥n de grupos"""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    # Depuraci√≥n adicional
    print(f"\n\n### INICIO FAQ_GRUPO CALLBACK ###")
    print(f"üîç Callback data: {call.data}")
    print(f"üë§ User ID: {call.from_user.id}, Chat ID: {chat_id}")
    print(f"üìù Message ID: {message_id}")
    
    # Responder al callback inmediatamente
    try:
        bot.answer_callback_query(call.id)
        print("‚úÖ Callback respondido correctamente")
    except Exception as e:
        print(f"‚ùå Error al responder al callback: {e}")
    
    # FAQ sin formato Markdown para evitar problemas de formato
    faq = (
        "‚ùì Preguntas frecuentes sobre grupos de tutor√≠a\n\n"
        
        "¬øPuedo crear varios grupos para la misma asignatura?\n"
        "No, solamente un grupo para avisos por asignatura y despues una sala unica para tutorias individuales.\n\n"
        
        "¬øEs necesario hacer administrador al bot?\n"
        "S√≠, el bot necesita permisos administrativos para poder gestioanr el grupo.\n\n"
        
        "¬øQui√©n puede acceder al grupo?\n"
        "Depende del tipo: los de avisos acceden todos los matriculados en la asignatura, los de tutor√≠a individual requieren aprobaci√≥n por parte del profeser siempre y cuando se encuentre en horario de tutorias.\n\n"
        
        "¬øPuedo cambiar el tipo de grupo despu√©s?\n"
        "S√≠, use /ver_misdatos y seleccione la sala para modificar su prop√≥sito.\n\n"
        
        "¬øC√≥mo eliminar un grupo?\n"
        "Use /ver_misdatos, seleccione la sala y elija la opci√≥n de eliminar.\n\n"
        
        "¬øLos estudiantes pueden crear grupos?\n"
        "No, solo los profesores pueden crear grupos de tutor√≠a oficiales."
    )
    
    # Bot√≥n para volver a las instrucciones
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="volver_instrucciones"))
    print("‚úÖ Markup de botones creado")
    
    try:
        print("üîÑ Intentando editar el mensaje actual...")
        # Intentar editar el mensaje actual
        bot.edit_message_text(
            text=faq,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=markup
        )
        print("‚úÖ FAQ enviado con √©xito (mensaje editado)")
    except Exception as e:
        print(f"‚ùå Error al editar mensaje para FAQ: {e}")
        import traceback
        print("üìã Traza de error completa:")
        traceback.print_exc()
        
        # En caso de error, enviar como mensaje nuevo
        try:
            print("üîÑ Intentando enviar como mensaje nuevo...")
            bot.send_message(
                chat_id,
                faq,
                reply_markup=markup
            )
            print("‚úÖ FAQ enviado con √©xito (mensaje nuevo)")
        except Exception as e2:
            print(f"‚ùå Error al enviar mensaje nuevo: {e2}")
            traceback.print_exc()
    
    print("### FIN FAQ_GRUPO CALLBACK ###\n\n")


@bot.callback_query_handler(func=lambda call: call.data == "volver_instrucciones")
def handler_volver_instrucciones(call):
    """Vuelve a mostrar las instrucciones originales"""
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    
    # Depuraci√≥n adicional
    print(f"\n\n### INICIO VOLVER_INSTRUCCIONES CALLBACK ###")
    print(f"üîç Callback data: {call.data}")
    print(f"üë§ User ID: {user_id}, Chat ID: {chat_id}")
    print(f"üìù Message ID: {call.message.message_id}")
    
    # Responder al callback inmediatamente
    try:
        bot.answer_callback_query(call.id)
        print("‚úÖ Callback respondido correctamente")
    except Exception as e:
        print(f"‚ùå Error al responder al callback: {e}")
    
    # Soluci√≥n para evitar crear un mensaje simulado
    try:
        print("üîÑ Preparando llamada a crear_grupo...")
        
        # Crear una clase simple que emule lo necesario de Message
        class SimpleMessage:
            def __init__(self, chat_id, user_id, text):
                self.chat = types.Chat(chat_id, 'private')
                self.from_user = types.User(user_id, False, 'Usuario')
                self.text = text
        
        # Crear el mensaje simplificado
        msg = SimpleMessage(chat_id, user_id, '/crear_grupo_tutoria')
        
        # Llamar directamente a la funci√≥n
        print("üîÑ Llamando a crear_grupo...")
        crear_grupo(msg)
        print("‚úÖ crear_grupo llamado con √©xito")
    except Exception as e:
        print(f"‚ùå Error al llamar a crear_grupo: {str(e)}")
        import traceback
        print("üìã Traza de error completa:")
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå Error al volver a las instrucciones. Intenta usar /crear_grupo_tutoria directamente.")
    
    print("### FIN VOLVER_INSTRUCCIONES CALLBACK ###\n\n")

# A√±adir al final del archivo, despu√©s de la funci√≥n obtener_nombre_profesor

def setup_polling():
    """Configura el polling para el bot y maneja errores"""
    print("ü§ñ Iniciando el bot...")
    try:
        # Configurar comandos disponibles
        if setup_commands():
            print("‚úÖ Comandos configurados correctamente")
        else:
            print("‚ö†Ô∏è Error al configurar comandos")
        
        # Agregar esta l√≠nea:
        print("‚öôÔ∏è Configurando polling con eventos de grupo...")
        
        # Modificar esta l√≠nea:
        bot.infinity_polling(
            timeout=10, 
            long_polling_timeout=5,
            allowed_updates=["message", "callback_query", "my_chat_member", "chat_member"]
        )
    except KeyboardInterrupt:
        print("üëã Bot detenido manualmente")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Error fatal: {e}")
        import traceback
        traceback.print_exc()
        
        # Reintentar despu√©s de un tiempo
        print("üîÑ Reintentando en 10 segundos...")
        time.sleep(10)
        setup_polling()

if __name__ == "__main__":
    print("="*50)
    print("üéì SISTEMA DE TUTOR√çAS UGR")
    print("="*50)
    print(f"üìÖ Fecha de inicio: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üíæ Base de datos: {DB_PATH}")
    print(f"üìä Excel de datos: {EXCEL_PATH}")
    print("="*50)
    
    # Iniciar el bot
    setup_polling()
